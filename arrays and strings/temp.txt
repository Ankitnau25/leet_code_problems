from pydantic import BaseModel, Field, ValidationError
from typing import List, Optional

class Example(BaseModel):
    input: str = Field(..., description="Example input text.")
    output: str = Field(..., description="Expected output text.")

class QuestionGenerationPrompt(BaseModel):
    instructions: str = Field(..., description="Instructions for the prompt.")
    contexts: List[str] = Field(..., description="List of context chunks.")
    input_format: str = Field(..., description="Format for the input.")
    output_format: str = Field(..., description="Format for the output.")
    examples: Optional[List[Example]] = Field([], description="List of input-output examples.")

    def build_prompt(self) -> str:
        examples_str = "\n".join([f"Input: {ex.input}\nOutput: {ex.output}" for ex in self.examples])
        contexts_str = "\n".join([f"Context: {ctx}" for ctx in self.contexts])
        prompt_str = (
            f"{self.instructions}\n\n"
            f"Contexts:\n{contexts_str}\n\n"
            f"Examples:\n{examples_str}\n\n"
            f"Input: {self.input_format}\n"
            f"Output: {self.output_format}"
        )
        return prompt_str

# Example data
example_data = {
    "instructions": "Generate a question from the following contexts.",
    "contexts": [
        "Python is a high-level programming language.",
        "Pydantic is used for data validation in Python."
    ],
    "input_format": "Context: {context}",
    "output_format": "Question: {question}",
    "examples": [
        {"input": "Context: Python is a high-level programming language.", "output": "Question: What type of programming language is Python?"},
        {"input": "Context: Pydantic is used for data validation in Python.", "output": "Question: What is Pydantic used for in Python?"}
    ]
}

# Validate and create the prompt template
try:
    prompt_template = QuestionGenerationPrompt(**example_data)
except ValidationError as e:
    print("Validation Error:", e)

# Build the prompt
prompt_string = prompt_template.build_prompt()
print("Built Prompt:")
print(prompt_string)
